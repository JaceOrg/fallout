/* Diagram of select QueuingTestRunner collaborators */

strict digraph {
  node [fontname="Helvetica", fontsize=12, shape=rect];
  edge [fontname="Helvetica", fontsize=10];
  graph [labeljust=r, labelloc=b, fontname="Helvetica", fontsize=10];
  label="generated from QueuingTestRunner-collaborators.dot"

  /* Places the main graph and the legend into two separate columns,
     aligning on the top edge */
  packmode=array_t2;

  // ==========================================================================
  // Semantic structure

  node [fontcolor=black, color=black];
  edge [fontcolor=black, color=black];

  TestRunExecutorFactory_AbortableTestRunExectorFactory
    [style=dashed, label="TestRunExecutorFactory", ];
  TestRunExecutorFactory_AbortableTestRunExectorFactory ->
    AbortableTestRunExecutorFactory [arrowtail=onormal, dir=back];

  TestRunExecutorFactory_AbortableTestRunExectorFactory ->
    TestRunExecutorFactoryExecutor [style=dotted, label="creates"];

  TestRunExecutorFactory
    [style=dashed, label="TestRunExecutorFactory"];

  TestRunExecutorFactory
    [style="dashed,filled", fillcolor=gray90, label="TestRunExecutorFactory"];
  AbortableTestRunExecutorFactory ->
    TestRunExecutorFactory
    [label="delegates to"];
  AbortableTestRunExecutorFactory -> TestRunStatus
    [style=dotted, label="aborts ActiveTestRuns\lusing...\l"];

  TestRunExecutorFactoryExecutor
    [style=dashed, label="TestRunExecutorFactory.Executor"]

  // --------------------------------------------------------------------------
  // STANDALONE/RUNNER

  node [fontcolor=brown, color=brown];
  edge [fontcolor=brown, color=brown];

  TestRunExecutorFactory ->
    ThreadedTestRunExecutorFactory [arrowtail=onormal, dir=back];

  ThreadedTestRunExecutorFactoryExecutor
    [label="ThreadedTestRunExecutorFactory.Executor"];
  TestRunExecutorFactoryExecutor -> ThreadedTestRunExecutorFactoryExecutor
    [arrowtail=onormal, dir=back];

  ThreadedTestRunExecutorFactoryExecutor ->
    ActiveTestRunFactory
    [style=dotted, label="creates ActiveTestRun using..."];

  ThreadedTestRunExecutorFactoryExecutor -> TestRunAbortedStatusUpdater [label="has a"];

  ThreadedTestRunExecutorFactory -> ThreadedTestRunExecutorFactoryExecutor
    [style=dotted, label="creates"];

  ThreadedTestRunExecutorFactory -> ActiveTestRunFactory [label="has a"];

  ActiveTestRunFactory -> ActiveTestRun
    [style=dotted, label="creates"]

  TestRunAbortedStatusUpdater -> ActiveTestRun
    [style=dotted, label="updates TestRun state using", dir=back];

  TestRunAbortedStatus [style=dashed];
  TestRunStatus [style=dashed]

  TestRunStatus -> TestRunAbortedStatusUpdater [arrowtail=onormal, dir=back];
  TestRunAbortedStatus -> TestRunAbortedStatusUpdater [arrowtail=onormal, dir=back];

  ManyThings
    [label="Many things", style=dotted, shape=oval];
  ManyThings -> TestRunAbortedStatus
    [style=dotted, label="check whether TestRun\lhas been aborted using\l"];

  StateStorage [style=dashed];
  TestRunAbortedStatusUpdater -> StateStorage
    [label="delegates TestRun.State storage to"];

  StateStorage -> TestRunStateStorage [arrowtail=onormal, dir=back];
  TestRunStateStorage -> AtomicallyPersistedTestRun
    [label="updates TestRuns using"];

  AtomicallyPersistedTestRun -> TestRunDAO;
  TestRunDAO -> DB
    [style=dashed, dir=both];
  DB [shape=cylinder]

  // --------------------------------------------------------------------------
  // STANDALONE/QUEUE

  node [fontcolor=red, color=red];
  edge [fontcolor=red, color=red];

  TestResource -> QueuingTestRunner [style=dotted, label="sends requests to"];
  QueuingTestRunner -> QueuingTestRunner_hasA [arrowhead=none];
  QueuingTestRunner_hasA [shape=none, label="has a"];

  QueuingTestRunner_hasA -> {
    TestRunQueue;
    TestRunQueueProcessor;
    AbortableTestRunExecutorFactory;
  }

  TestRunQueueProcessor -> ReadOnlyTestRunQueue
    [label="1. takes TestRuns from..."];
  TestRunQueueProcessor -> UserCredentialsFactory
    [label="2. creates UserCredentials from TestRun using..."];
  TestRunQueueProcessor -> TestRunExecutorFactory_AbortableTestRunExectorFactory
    [label="3. creates TestRunExecutorFactory.Executor\lfrom TestRun, UserCredentials using...\l"];
  TestRunQueueProcessor -> TestRunExecutorFactoryExecutor
    [style=dotted, label="4. runs TestRun and waits for\lresource allocation using...\l"]

  UserCredentialsFactory [style="dashed, filled", fillcolor=gray90];

  ReadOnlyTestRunQueue [style=dashed];
  ReadOnlyTestRunQueue -> TestRunQueue [arrowtail=onormal, dir=back];

  TestRunQueue -> PendingQueue
    [label="delegates storage to"];

  PendingQueue [style="dashed,filled", fillcolor=gray90];
  PendingQueue -> PersistentPendingQueue [arrowtail=onormal, dir=back];

  PersistentPendingQueue -> TestRunDAO
    [style=dotted, label="extracts TestRuns from"];

  // --------------------------------------------------------------------------
  // RUNNER

  node [fontcolor=blue, color=blue];
  edge [fontcolor=blue, color=blue];

  RunnerResource -> DirectTestRunner [style=dotted, label="sends requests to"]

  DirectTestRunner -> TestRunExecutorFactory_AbortableTestRunExectorFactory
    [label="1. creates TestRunExecutorFactory.Executor\lfrom TestRun, UserCredentials using...\l"];
  DirectTestRunner -> TestRunExecutorFactoryExecutor
    [style=dotted, label="2. runs TestRun and waits for\lresource allocation using...\l"]
  DirectTestRunner -> AbortableTestRunExecutorFactory;

  // --------------------------------------------------------------------------
  // QUEUE

  node [fontcolor=purple, color=purple];
  edge [fontcolor=purple, color=purple];

  TestRunExecutorFactory -> DelegatingTestRunExecutorFactory
    [arrowtail=onormal, dir=back];
  DelegatingTestRunExecutorFactoryExecutor
    [label="DelegatingTestRunExecutorFactory.Executor"];
  DelegatingTestRunExecutorFactory -> DelegatingTestRunExecutorFactoryExecutor
    [style=dotted, label="creates"];

  RunnerResource -> DelegatingTestRunExecutorFactoryExecutor
    [style=dashed, dir=back, label="delegates runs to"];

  RunnerResource -> DelegatingTestRunExecutorFactory
    [style=dashed, dir=back, label="reads state updates from"];

  RunnerResource -> DelegatingTestRunExecutorFactory_TestRunStatusUpdater
    [style=dashed, dir=back, label="sends aborts to"];

  DelegatingTestRunExecutorFactory -> TestRunStatusUpdatePublisher
    [label="sends state updates to"];

  DelegatingTestRunExecutorFactoryExecutor ->
    DelegatingTestRunExecutorFactory_TestRunStatusUpdater;

  DelegatingTestRunExecutorFactory_TestRunStatusUpdater
    [label="DelegatingTestRunExecutorFactory.Executor.TestRunStatusUpdater"];

  TestRunStatusUpdater ->
    DelegatingTestRunExecutorFactory_TestRunStatusUpdater
    [arrowtail=onormal, dir=back];

  TestRunStatus -> DelegatingTestRunExecutorFactory_TestRunStatusUpdater
    [arrowtail=onormal, dir=back];

  TestRunStatusUpdatePublisher ->
    DelegatingTestRunExecutorFactory_TestRunStatusUpdater
    [style=dotted, dir=back, label="subscribes to state updates from"];

  DelegatingTestRunExecutorFactory_StateStorage [style=dashed, label="StateStorage"];
  DelegatingTestRunExecutorFactory_TestRunStatusUpdater ->
    DelegatingTestRunExecutorFactory_StateStorage
    [label="delegates TestRun.State storage to"];

  DelegatingTestRunExecutorFactory_StateStorage -> InMemoryTestRunStateStorage [arrowtail=onormal, dir=back];


  // ==========================================================================
  // Legend

  node [color=black, fontcolor=black];
  edge [fontcolor=black, color=black];

  subgraph cluster_legend {
    graph [labeljust=c, labelloc=t];
    label="Legend";
    color=gray;

    StandaloneAndQueueComponents
      [color=red, fontcolor=red,
      label="STANDALONE and QUEUE-specific\ncomponents"]

    QueueComponents
      [color=purple, fontcolor=purple,
      label="QUEUE-specific\ncomponents"]

    RunnerComponents
      [color=blue, fontcolor=blue,
      label="RUNNER-specific\ncomponents"]

    StandaloneAndRunnerComponents
      [color=brown, fontcolor=brown,
      label="STANDALONE and RUNNER-specific\ncomponents"]

    Dependencies [style=filled, fillcolor=gray90,
      label="Dependencies passed\nin to *TestRunner"];

    Interface [style=dashed];
    Interface -> ConcreteClass [arrowtail=onormal, dir=back, label="implements/extends"];

    ConcreteClass -> ClassA [label="has a"];
    ConcreteClass -> ClassB [style=dotted, label="uses"];
    ConcreteClass -> ClassC [style=dashed, label="communicates with"];

    Dependencies ->
    StandaloneAndQueueComponents ->
    QueueComponents ->
    RunnerComponents ->
    StandaloneAndRunnerComponents ->
    Interface
      [style=invis];

    StandaloneAndQueueComponents [group=Interface];
    QueueComponents [group=Interface];
    RunnerComponents [group=Interface];
    StandaloneAndRunnerComponents [group=Interface];
    Dependencies [group=Interface];
    Interface [group=Interface];
    ConcreteClass [group=Interface];
    ClassB [group=Interface];
  }

  // ==========================================================================
  /* Layout tweaks

  - use subgraphs with rank=same to force nodes into the same row, using edges
    with style=invis to force order.

  - use group attribute to force nodes into the same column, using edges with
    style=invis to join nodes in the same group that don't already have an edge
    joining them.

  */

  subgraph {
    rank=same;
    TestResource;
    RunnerResource;
  }

  subgraph {
    rank=same;
    QueuingTestRunner ->
    DirectTestRunner [style=invis];
  }

  TestResource
    [group=TestResource];
  QueuingTestRunner
    [group=TestResource];
  QueuingTestRunner_hasA
    [group=TestResource];
  TestRunQueueProcessor
    [group=TestResource];

  UserCredentialsFactory
    [group=TestResource];
  UserCredentialsFactory -> ManyThings
    [style=invis];
  ManyThings
    [group=TestResource];
  TestRunAbortedStatus
    [group=TestResource];
  TestRunAbortedStatusUpdater
    [group=TestResource];
  StateStorage
    [group=TestResource];
  TestRunStateStorage
    [group=TestResource];
  AtomicallyPersistedTestRun
    [group=TestResource];

  RunnerResource
    [group=RunnerResource];
  DirectTestRunner
    [group=RunnerResource];
  TestRunExecutorFactoryExecutor
    [group=RunnerResource];

  subgraph {
    rank=same;
    ReadOnlyTestRunQueue ->
    UserCredentialsFactory ->
    TestRunExecutorFactory_AbortableTestRunExectorFactory
      [style=invis];
    TestRunExecutorFactoryExecutor;
  }

  ThreadedTestRunExecutorFactoryExecutor
    [group=RunnerResource];

  ReadOnlyTestRunQueue [group=TestRunQueue];
  TestRunQueue [group=TestRunQueue];
  PendingQueue [group=TestRunQueue];
  PersistentPendingQueue [group=TestRunQueue];

  TestRunExecutorFactory_AbortableTestRunExectorFactory
    [group=AbortableTestRunExecutorFactory];
  AbortableTestRunExecutorFactory
    [group=AbortableTestRunExecutorFactory];
  TestRunExecutorFactory
    [group=AbortableTestRunExecutorFactory];
  ThreadedTestRunExecutorFactory
    [group=AbortableTestRunExecutorFactory];
  ActiveTestRunFactory
    [group=AbortableTestRunExecutorFactory];
  ActiveTestRun
    [group=AbortableTestRunExecutorFactory];

  subgraph {
    rank=same;
    ThreadedTestRunExecutorFactory;
    ThreadedTestRunExecutorFactoryExecutor;
  }

  subgraph {
    rank=same;
    DelegatingTestRunExecutorFactory;
    DelegatingTestRunExecutorFactoryExecutor;
  }

  subgraph {
    rank=same;
    TestRunAbortedStatus;
    TestRunStatus;
  }

  subgraph {
    rank=same;
    TestRunAbortedStatusUpdater;
    ActiveTestRun;
  }

  subgraph {
    rank=same;
    ManyThings -> ThreadedTestRunExecutorFactory [style=invis];
  }
}
